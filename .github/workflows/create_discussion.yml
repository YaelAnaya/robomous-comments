name: Manage Discussions for Post Events

on:
  repository_dispatch:
    types: [manage_discussion]

jobs:
  manage-discussions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Condición para crear una discusión
      - name: Create Discussion
        if: ${{ github.event.client_payload.operation == 'create' }}
        id: create-discussion
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_ID: ${{ secrets.REPOSITORY_ID }}
          CATEGORY_ID: ${{ secrets.CATEGORY_ID }}
          TITLE: ${{ github.event.client_payload.slug }}
          BODY: "Post at: (https://robomous.ai/blog/${{ github.event.client_payload.slug }})"

        run: |
          # Construcción de JSON usando un método seguro
          payload=$(jq -n --arg repoId "$REPO_ID" \
                           --arg categoryId "$CATEGORY_ID" \
                           --arg title "$TITLE" \
                           --arg body "$BODY" \
                           '{
                             query: "mutation ($repoId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
                               createDiscussion(input: {
                                 repositoryId: $repoId,
                                 categoryId: $categoryId,
                                 title: $title,
                                 body: $body
                               }) {
                                 discussion {
                                   id
                                   number
                                 }
                               }
                             }",
                             variables: {
                               repoId: $repoId,
                               categoryId: $categoryId,
                               title: $title,
                               body: $body
                             }
                           }')

          # Realizar la solicitud a la API GraphQL de GitHub
          response=$(curl -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            https://api.github.com/graphql)

          # Mostrar la respuesta para depuración
          echo "Response: $response"

          # Extraer el discussionId de la respuesta
          discussionId=$(echo "$response" | jq -r '.data.createDiscussion.discussion.id')
          discussionNum=$(echo "$response" | jq -r '.data.createDiscussion.discussion.number')

          if [ -z "$discussionId" ] || [ "$discussionId" == "null" ]; then
            echo "Error: Failed to create discussion."
            exit 1
          fi

          echo "discussion_id=$discussionId" >> $GITHUB_ENV
          echo "discussion_num=$discussionNum" >> $GITHUB_ENV

      # Agregar el discussionId al documento de Sanity
      - name: Update Sanity with Discussion ID
        if: ${{ github.event.client_payload.operation == 'create' }}
        env:
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
          SANITY_TOKEN: ${{ secrets.SANITY_TOKEN }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $SANITY_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "mutations": [
                {
                  "patch": {
                    "id": "'"${{ github.event.client_payload._id }}"'",
                    "set": {
                      "discussionId": "'"$discussion_id"'"
                      "discussionNumber": "'"$discussion_num"'"
                    }
                  }
                }
              ]
            }' \
            https://$SANITY_PROJECT_ID.api.sanity.io/v1/data/mutate/$SANITY_DATASET

      # Condición para eliminar una discusión
      - name: Delete Discussion
        if: ${{ github.event.client_payload.operation == 'delete' && github.event.client_payload.discussionId != null }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "mutation ($discussionId: ID!) {
                deleteDiscussion(input: { id: $discussionId }) {
                  clientMutationId
                }
              }",
              "variables": {
                "discussionId": "'"${{ github.event.client_payload.discussionId }}"'"
              }
            }' \
            https://api.github.com/graphql
